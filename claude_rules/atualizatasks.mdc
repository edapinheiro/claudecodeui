---
description: 
globs: 
alwaysApply: true
---

# üõ†Ô∏è Regras para Implementa√ß√£o de Tasks e Commits no GitHub

## 1. Atualiza√ß√£o de Status de Tasks

Sempre que for pedido a implementa√ß√£o de alguma task:
- Antes, pedir autoriza√ß√£o do usu√°rio para atualizar o status da task.
- Ap√≥s a confirma√ß√£o do usu√°rio, executar:

```bash
task-master update-subtask --id=<id> --status=in-progress
```

## 2. Subtasks

Se a task possuir subtasks:
- A cada in√≠cio de uma subtask, executar:

```bash
task-master set-status --id=<parentId.subtaskId> --status=in-progress
```

- Ao finalizar a subtask:

```bash
task-master set-status --id=<parentId.subtaskId> --status=done
```


## 2.1. Enviar para o git hub a task apos completa sob ordem.
> **A√á√ÉO CR√çTICA:** Siga rigorosamente as diretrizesAo alterar o status para done da subtask, **SEMPRE PEDIR AUTORIZACAO** para commitar e enviar para o github caso positivo seguindo **estritamente as regras no passo 4** , caso negativo aguarde novas instruncoes.

## 3. Finaliza√ß√£o da Task Principal

Sempre que toda a tarefa e todas as subtasks estiverem com o status `done`, atualizar o progresso da task principal:

```bash
task-master set-status --id=<id> --status=done
```

---

## 4  üéØ Regas de Commit e enviar para o gitHub

Realizar um commit e envio de c√≥digo para o GitHub com **mensagem padronizada**, respeitando os seguintes formatos de `summary` e `description`, al√©m da **sequ√™ncia correta de comandos Git**.
> **A√á√ÉO CR√çTICA:** Todos os commits SEMPRE devem ser no branch develop e **NUNCA na branch main**. Sendo assim a cada commit verificar se a branch atual √© a main, caso positivo **PARE imidiatamente** e avise que nao pode fazer o commit pois o branch atual esta fora das diretrizes de commit. **Voce s√≥ esta autorizado a fazer commit na branch "develop" caso n√£o exista crie a mesma.** 

## üìå Formatos de Mensagem

### ‚úÖ 4.1. Commit do tipo *implementa√ß√£o com task identificada*
**Resumo (summary):**
```
#ID da Task - Nome da task
```
**Exemplo:**
```
#123 - Implementa√ß√£o da tela de login com autentica√ß√£o via API
```

---

### ‚úÖ 4.2. Commit do tipo *corre√ß√£o de bug ou issue com task identificada*
**Resumo (summary):**
```
Correcao - #ID da Task - Nome da task
```
**Exemplo:**
```
Correcao - #12 - Implementacao do Pedido de Compras
```

---

### ‚úÖ 4.3. Commit do tipo *corre√ß√£o de bug ou issue sem task identificada*
**Resumo (summary):**
```
Correcao - #Causa Principal
```
**Exemplo:**
```
Correcao - #Erro de arredondamento em c√°lculo de total de pedido
```

---

### ‚úÖ 4.4. Commit do tipo *implementa√ß√£o sem task associada*
**Resumo (summary):**
```
Implementa√ß√£o - #Principal Implementa√ß√£o
```
**Exemplo:**
```
Implementa√ß√£o - #Adi√ß√£o de componente de modal gen√©rico reutiliz√°vel
```

---

## üìù Description (descri√ß√£o do commit)

Deve conter um **resumo claro do que foi feito**, incluindo:
- O que foi implementado ou corrigido
- Como foi feito ou resolvido
- Tecnologias, componentes ou arquivos principais envolvidos

**Exemplo:**
```
Foi implementado o componente Modal reutiliz√°vel com controle de abertura via props e uso de portal para inser√ß√£o no body.
Corrigido problema de foco no campo de input ao abrir o modal.
```

---

## üß© Comandos Git a serem executados

# 1. Verificar a branch atual e interromper se n√£o for 'develop'
CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
if [ "$CURRENT_BRANCH" != "develop" ]; then
  echo "Erro: Voc√™ n√£o est√° na branch 'develop'. Mude para a branch 'develop' antes de continuar."
  exit 1
fi

# 2. Verificar modifica√ß√µes no projeto
git status

# 3. Adicionar todos os arquivos modificados
git add .

# 4. Realizar commit com t√≠tulo e descri√ß√£o
git commit -m "<summary>" -m "<description>"

# 5. Enviar para o GitHub (para a branch 'develop')
git push origin develop
```

---

## üß† Importante

Sempre ao terminar o passo 3, adicione na mem√≥ria o que foi acabado de implementar utilizando o **MCP Openmemory**.
