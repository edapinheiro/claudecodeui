---
description: 
globs: 
alwaysApply: false
---
# üö® DIRETRIZES CR√çTICAS DE DESENVOLVIMENTO - PREVEN√á√ÉO DE RETRABALHO

> **Vers√£o:** 2.0  
> **Data:** 2025  
> **Baseado em:** 334 warnings eliminados em 3 dias de retrabalho  

---

## üìã √çndice

1. @Processo Cognitivo Obrigat√≥rio
2. @Sistema de Gates
3. @Proibi√ß√µes Absolutas
4. @Protocolo de Pensamento
5. @Obriga√ß√µes Durante Desenvolvimento
6. @Padr√µes por Categoria
7. @Verifica√ß√µes Autom√°ticas
8. @Template de Verifica√ß√£o
9. @Hierarquia de Severidade
10. @Comandos de Verifica√ß√£o R√°pida

---

## üß† **PROCESSO COGNITIVO OBRIGAT√ìRIO - CHAIN OF THOUGHT**

### **ANTES de escrever QUALQUER c√≥digo, voc√™ DEVE:**

#### 1. **VERBALIZAR e DOCUMENTAR seu planejamento:**

```
PLANEJAMENTO INICIAL:
- Qual problema estou resolvendo? _______________
- Quais tipos/interfaces precisarei? _______________
- Quais imports ser√£o necess√°rios? _______________
- Posso resolver sem usar 'any'? _______________
```

#### 2. **EXECUTAR o protocolo de pensamento:**

```
"Vou criar [nome da fun√ß√£o/componente]...
ANALISANDO: Preciso dos tipos [listar tipos]
DECIDINDO: Vou importar apenas [listar imports necess√°rios]
GARANTINDO: Nenhum 'any' ser√° usado porque [explicar alternativa]"
```

---

## üö¶ **SISTEMA DE GATES - PARADAS OBRIGAT√ìRIAS**

### **GATE 1 - Planejamento (ANTES de codificar)**

```xml
<pre_coding_check>
  <verify>Listei todos os tipos necess√°rios? ‚ñ°</verify>
  <verify>Identifiquei todos os imports? ‚ñ°</verify>
  <verify>Tenho alternativa para evitar 'any'? ‚ñ°</verify>
  <decision>PROSSEGUIR apenas se TODOS = SIM</decision>
</pre_coding_check>
```

### **GATE 2 - Verifica√ß√£o Incremental (A CADA 10 linhas)**

```xml
<incremental_check>
  <scan>Buscar 'any' nas √∫ltimas 10 linhas</scan>
  <scan>Verificar imports ainda n√£o utilizados</scan>
  <scan>Checar par√¢metros declarados vs usados</scan>
  <action>Se encontrar problemas: CORRIGIR IMEDIATAMENTE</action>
</incremental_check>
```

### **GATE 3 - Valida√ß√£o Final (ANTES de entregar)**

```xml
<final_validation>
  <must_complete>
    - [ ] grep ": any" retornou 0 ocorr√™ncias
    - [ ] Todos imports s√£o utilizados
    - [ ] Todos par√¢metros s√£o necess√°rios
    - [ ] Todos os retornos s√£o tipados
  </must_complete>
</final_validation>
```

---

## üî• **REGRA ZERO - PRESERVA√á√ÉO DE C√ìDIGO LIMPO**

### **‚õî VIOLA√á√ÉO GRAV√çSSIMA - NUNCA INTRODUZIR WARNINGS**

<critical_rule_zero>
**SE O C√ìDIGO EST√Å SEM WARNINGS ‚Üí DEVE PERMANECER SEM WARNINGS**

‚ùå **PROIBIDO ABSOLUTAMENTE:**
- Pegar c√≥digo com 0 warnings e devolver com warnings
- Adicionar QUALQUER c√≥digo que gere novo warning
- Modificar c√≥digo limpo de forma que introduza problemas

‚úÖ **OBRIGAT√ìRIO:**
- ANTES de come√ßar a se√ßao de escrita de codigo: `npm run build` dentro de gerescopo/frontend‚Üí Se encontrar erros no build **PARAR imediatamente e NOTIFICAR que o build esta com erros**, caso esteja sem erros, continuar e seguir.
- ANTES de modificar: `npm run lint` dentro de gerescopo/frontend‚Üí guardar resultado
- DEPOIS de modificar: `npm run lint` dentro de gerescopo/frontend ‚Üí DEVE ter mesmo ou MENOS warnings
- Se introduziu warnings: REVERTER e refazer
- Por ultimo executar o comando: `npx tsc --noEmit caminho_do_arquivo_criado_ou_modificado --jsx react-jsx --skipLibCheck --allowSyntheticDefaultImports --esModuleInterop` ‚Üí  Caso tenha algum erro **PARE** imediatamente e corrija o erro, caso **N√ÇO TENHA ERRO** siga.


**PENALIDADE:** Introduzir warnings em c√≥digo limpo = FALHA TOTAL
</critical_rule_zero>

### **‚õî C√ìDIGO ESPECULATIVO - TERMINANTEMENTE PROIBIDO**

<no_future_code>
‚ùå **JAMAIS IMPLEMENTE:**
- C√≥digo "para usar depois"
- Fun√ß√µes "que ser√£o √∫teis no futuro"
- Imports "que vou precisar mais tarde"
- Interfaces "para quando implementar X"

**REGRA MENTAL OBRIGAT√ìRIA:**
"Se n√£o vou usar AGORA nesta modifica√ß√£o ‚Üí N√ÉO ESCREVO"

**VERIFICA√á√ÉO:**
- Cada linha adicionada √© usada IMEDIATAMENTE? 
- Se N√ÉO ‚Üí DELETE antes de entregar
</no_future_code>

--

## üõë **JAMAIS FA√áA - LISTA DE PROIBI√á√ïES ABSOLUTAS**

### üö´ **1. USO DE `any` - TERMINANTEMENTE PROIBIDO**

#### ‚ùå **NUNCA FA√áA ISSO:**

```typescript
function processData(data: any): any {
    return data.something;
}

const result: any = someFunction();
catch (error: any) { }
```

#### üí≠ **PROCESSO MENTAL CORRETO:**

```
"Encontrei um caso onde preciso tipar 'data'...
PENSANDO: Qual a estrutura de 'data'? 
ANALISANDO: data tem propriedade 'something'
DECIS√ÉO: Vou criar interface ProcessedData com { something: tipo }"
```

#### ‚úÖ **SEMPRE FA√áA ASSIM:**

```typescript
interface ProcessedData {
    something: string; // ou o tipo apropriado
}

function processData(data: ProcessedData): ProcessedData {
    return data;
}

const result: SpecificType = someFunction();
catch (error) { 
    if (error instanceof Error) {
        // tratamento tipado
    }
}
```

### üö´ **2. IMPORTS N√ÉO UTILIZADOS - REMO√á√ÉO OBRIGAT√ìRIA**

#### üí≠ **VERIFICA√á√ÉO MENTAL:**

```
"Antes de adicionar import...
PERGUNTO: Vou realmente usar isso?
VERIFICO: Em que linha usarei?
DECIS√ÉO: Se n√£o tenho certeza ‚Üí N√ÉO IMPORTO"
```

#### ‚ùå **NUNCA DEIXE IMPORTS √ìRF√ÉOS:**

```typescript
import { UnusedType, AnotherUnused } from './types';
import { SomeFunction } from './utils'; // se n√£o usar, REMOVA
```

#### ‚úÖ **APENAS IMPORTS EFETIVAMENTE UTILIZADOS:**

```typescript
import { UsedType } from './types';
// UsedType usado na linha 15
```

### üö´ **3. VARI√ÅVEIS E PAR√ÇMETROS N√ÉO UTILIZADOS**

#### üí≠ **AN√ÅLISE DE PAR√ÇMETROS:**

```
"Definindo fun√ß√£o...
LISTANDO: Quais par√¢metros preciso?
VERIFICANDO: Cada par√¢metro ser√° usado onde?
LIMPANDO: Remover os n√£o essenciais"
```

#### ‚ùå **NUNCA DEIXE PAR√ÇMETROS SEM USO:**

```typescript
function process(data: Data, unusedParam: string) {
    return data.value;
}
```

#### ‚úÖ **REMOVA OU MARQUE ADEQUADAMENTE:**

```typescript
function process(data: Data) {
    return data.value;
}

// OU se for obrigat√≥rio pela interface:
function process(data: Data, _unusedParam: string) {
    return data.value;
}
```

### üö´ **4. FUN√á√ïES SEM TIPAGEM ADEQUADA**

#### üí≠ **PROTOCOLO DE TIPO DE RETORNO:**

```
"Criando fun√ß√£o...
PERGUNTO: O que esta fun√ß√£o retorna?
ANALISO: Qual o tipo exato do retorno?
DECLARO: Tipo expl√≠cito no retorno"
```

#### ‚ùå **JAMAIS FA√áA RETORNOS SEM TIPO:**

```typescript
function calculate() { // Tipo de retorno indefinido
    return someComplexCalculation();
}
```

#### ‚úÖ **SEMPRE DEFINA TIPOS DE RETORNO:**

```typescript
interface CalculationResult {
    value: number;
    unit: string;
}

function calculate(): CalculationResult {
    return someComplexCalculation();
}
```

---

## üó£Ô∏è **PROTOCOLO DE PENSAMENTO EM VOZ ALTA**

### **Exemplo de Narra√ß√£o Mental Obrigat√≥ria:**

```typescript
// "Vou criar um componente de formul√°rio...
// PENSANDO: Preciso tipar as props - FormProps
// PENSANDO: Preciso tipar o estado - FormState
// DECIDINDO: Imports necess√°rios: { useState } from 'react', { FormProps, FormState } from './types'
// VERIFICANDO: 2 imports, ambos ser√£o usados

import { useState } from 'react';
import { FormProps, FormState } from './types';

// CONTINUANDO: Definindo o componente com tipos expl√≠citos
export function Form({ onSubmit, initialData }: FormProps): JSX.Element {
    // PENSANDO: Estado precisa do tipo FormState
    const [state, setState] = useState<FormState>(initialData);
    
    // VERIFICANDO: usei todos os imports? ‚úì
    // VERIFICANDO: usei todos os par√¢metros? ‚úì
    // VERIFICANDO: tem algum 'any'? ‚úó
}
```

---

## ‚úÖ **OBRIGA√á√ïES DURANTE O DESENVOLVIMENTO**

### üìã **1. CHECKLIST PR√â-COMMIT OBRIGAT√ìRIO**

```bash
# PASSO 1: Verifica√ß√£o autom√°tica
npm run lint

# PASSO 2: Auto-verifica√ß√£o mental
echo "Verificando manualmente..."
grep -r ": any" src/ --include="*.ts" --include="*.tsx"

# PASSO 3: S√≥ commitar se ZERO warnings
```

### üìã **2. TIPAGEM DEFENSIVA OBRIGAT√ìRIA**

```typescript
// ‚úÖ SEMPRE crie interfaces/types espec√≠ficos:

// PENSANDO: "Vou processar configura√ß√µes, preciso tipar"
interface ProcessingConfig {
    timeout: number;
    retries: number;
    batchSize: number;
}

// PENSANDO: "O resultado precisa estrutura clara"
interface ProcessingResult {
    success: boolean;
    data: ProcessedData[];
    errors: ProcessingError[];
}

// PENSANDO: "Errors podem ser de v√°rios tipos"
interface ProcessingError {
    code: string;
    message: string;
    timestamp: Date;
}

// ‚úÖ SEMPRE tipifique catch blocks adequadamente:
try {
    // opera√ß√£o
} catch (error) { 
    // PENSANDO: "error √© unknown, preciso verificar tipo"
    if (error instanceof Error) {
        logger.error('Processing failed:', error.message);
    } else {
        logger.error('Unknown error:', String(error));
    }
}
```

### üìã **3. LIMPEZA CONT√çNUA OBRIGAT√ìRIA**

- **A cada fun√ß√£o criada**: 
  - [ ] "Todos os imports que adicionei s√£o usados?"
  - [ ] "Posso ver onde cada import √© usado?"
  
- **A cada interface/type**: 
  - [ ] "Esta interface √© usada em algum lugar?"
  - [ ] "Posso apontar exatamente onde?"
  
- **A cada par√¢metro**: 
  - [ ] "Este par√¢metro √© usado no corpo da fun√ß√£o?"
  - [ ] "Se n√£o, preciso do prefixo _ ou remover?"

---

## üéØ **PADR√ïES OBRIGAT√ìRIOS POR CATEGORIA**

### **APIs/Routes**

```typescript
// PENSAMENTO: "Criando endpoint POST...
// PRECISO: Tipar body da request e response
// EVITAR: any no request/response"

// PASSO 1: Definir tipos
interface CreateUserRequest {
    email: string;
    name: string;
    role: UserRole;
}

interface CreateUserResponse {
    id: string;
    createdAt: Date;
}

// PASSO 2: Implementar com tipos
export async function POST(
    request: NextRequest
): Promise<NextResponse<CreateUserResponse | ErrorResponse>> {
    try {
        // VERIFICANDO: body tem tipo espec√≠fico
        const body: CreateUserRequest = await request.json();
        
        // implementa√ß√£o
        
        return NextResponse.json({ 
            id: newUser.id,
            createdAt: new Date() 
        });
    } catch (error) {
        // PENSANDO: "N√£o posso usar any no catch"
        if (error instanceof ValidationError) {
            return NextResponse.json(
                { error: error.message }, 
                { status: 400 }
            );
        }
        return NextResponse.json(
            { error: 'Internal server error' }, 
            { status: 500 }
        );
    }
}
```

### **Services/Utilities**

```typescript
// NARRA√á√ÉO: "Criando service class...
// VERIFICANDO: Cada m√©todo tem tipo de retorno
// GARANTINDO: Nenhum 'any' em propriedades"

interface ServiceConfig {
    apiUrl: string;
    timeout: number;
    retryAttempts: number;
}

interface ServiceError {
    code: string;
    message: string;
    retryable: boolean;
}

class UserService {
    // PENSANDO: "Config precisa ser readonly e tipada"
    private readonly config: ServiceConfig;
    
    constructor(config: ServiceConfig) {
        this.config = config;
    }
    
    // PENSANDO: "M√©todo precisa tipos de entrada e sa√≠da"
    public async createUser(data: CreateUserData): Promise<User> {
        // implementa√ß√£o com tipos espec√≠ficos
    }
    
    // PENSANDO: "Error handling sem 'any'"
    private handleError(error: unknown): never {
        if (error instanceof Error) {
            throw new ServiceError({
                code: 'SERVICE_ERROR',
                message: error.message,
                retryable: false
            });
        }
        throw new ServiceError({
            code: 'UNKNOWN_ERROR',
            message: 'An unknown error occurred',
            retryable: false
        });
    }
}
```

### **React Components**

```typescript
// PROCESSO MENTAL: "Component precisa:
// 1. Interface para props
// 2. Tipo de retorno JSX.Element
// 3. Sem 'any' em handlers"

interface ButtonProps {
    label: string;
    onClick: (event: React.MouseEvent<HTMLButtonElement>) => void;
    variant?: 'primary' | 'secondary';
    disabled?: boolean;
}

// VERIFICANDO: "Todas as props t√™m tipos espec√≠ficos ‚úì"
export function Button({ 
    label, 
    onClick, 
    variant = 'primary',
    disabled = false 
}: ButtonProps): JSX.Element {
    // PENSANDO: "Handler precisa tipo espec√≠fico do evento"
    const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {
        if (!disabled) {
            onClick(event);
        }
    };
    
    return (
        <button
            className={`btn btn-${variant}`}
            onClick={handleClick}
            disabled={disabled}
        >
            {label}
        </button>
    );
}

// VERIFICA√á√ÉO FINAL:
// - Props tipadas? ‚úì
// - Retorno tipado? ‚úì
// - Handlers tipados? ‚úì
// - Algum 'any'? ‚úó
```

---

## üîç **VERIFICA√á√ïES AUTOM√ÅTICAS OBRIGAT√ìRIAS**

### **Antes de CADA commit:**

```bash
# 1. VERIFICA√á√ÉO COMPLETA
npm run lint
# DEVE retornar: 0 warnings, 0 errors

# 2. VERIFICA√á√ÉO DE TIPOS
npm run type-check
# DEVE passar sem erros

# 3. BUSCA POR 'ANY' 
grep -r ": any\|any\[\]\|as any" src/ --include="*.ts" --include="*.tsx"
# DEVE retornar: vazio

# 4. VERIFICA√á√ÉO MENTAL FINAL
echo "Respondendo mentalmente:"
echo "- Todos os imports s√£o usados? [S/N]"
echo "- Todas as fun√ß√µes t√™m retorno tipado? [S/N]"
echo "- Todos os par√¢metros s√£o necess√°rios? [S/N]"
echo "- Zero uso de 'any'? [S/N]"
```

### **Durante desenvolvimento:**

```bash
# Configure seu editor para mostrar eslint em tempo real
# VSCode: ESLint extension com configura√ß√£o:
{
    "eslint.enable": true,
    "eslint.run": "onType",
    "editor.codeActionsOnSave": {
        "source.fixAll.eslint": true
    }
}
```

---

## üìù **TEMPLATE DE VERIFICA√á√ÉO FINAL OBRIGAT√ìRIO**

Ao final de CADA arquivo, voc√™ DEVE preencher mentalmente:

```
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
VERIFICA√á√ÉO DE QUALIDADE - [Nome do Arquivo]
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‚ñ° Busquei por 'any' no c√≥digo? 
  ‚îî‚îÄ Resultado: [0 ocorr√™ncias / X ocorr√™ncias encontradas e corrigidas]

‚ñ° Contei imports vs uso real? 
  ‚îî‚îÄ Resultado: [X imports, todos utilizados / Y n√£o utilizados removidos]

‚ñ° Verifiquei par√¢metros n√£o utilizados? 
  ‚îî‚îÄ Resultado: [Todos necess√°rios / X removidos]

‚ñ° Todos os tipos s√£o espec√≠ficos? 
  ‚îî‚îÄ Resultado: [Sim, sem tipos gen√©ricos / Criadas X interfaces]

‚ñ° Fun√ß√µes t√™m tipo de retorno? 
  ‚îî‚îÄ Resultado: [100% tipadas / X fun√ß√µes corrigidas]

‚ñ° Tratamento de erro tipado? 
  ‚îî‚îÄ Resultado: [Sem 'any' em catch / X catches corrigidos]

DECIS√ÉO FINAL: [‚úì APROVAR / ‚úó REVISAR]
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
### **VERIFICA√á√ÉO CR√çTICA - DEGRADA√á√ÉO DE C√ìDIGO**
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
COMPARA√á√ÉO ANTES/DEPOIS
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‚ñ° Warnings ANTES da modifica√ß√£o: _____
‚ñ° Warnings DEPOIS da modifica√ß√£o: _____
‚ñ° AN√ÅLISE:
‚îî‚îÄ [ ] Mantive ou melhorei (‚â§ warnings iniciais)
‚îî‚îÄ [ ] DEGRADEI o c√≥digo (> warnings iniciais) ‚ö†Ô∏è FALHA!
‚ñ° Adicionei c√≥digo especulativo?
‚îî‚îÄ [ ] N√ÉO - todo c√≥digo √© usado imediatamente
‚îî‚îÄ [ ] SIM - tem c√≥digo "para o futuro" ‚ö†Ô∏è FALHA!
DECIS√ÉO: [‚úì APROVAR apenas se ZERO degrada√ß√£o]
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
```

---

## üî¥ **HIERARQUIA DE SEVERIDADE - ORDEM DE VERIFICA√á√ÉO**

### **N√çVEL 1 - CR√çTICO (verificar PRIMEIRO)**

1. Presen√ßa de `: any` em qualquer lugar
2. Fun√ß√µes sem tipo de retorno expl√≠cito
3. Catch blocks com `any`

### **N√çVEL 2 - ALTO (verificar SEGUNDO)**

4. Imports n√£o utilizados
5. Par√¢metros n√£o utilizados sem `_`
6. Vari√°veis declaradas mas n√£o usadas

### **N√çVEL 3 - M√âDIO (verificar TERCEIRO)**

7. Interfaces muito gen√©ricas
8. Types que poderiam ser mais espec√≠ficos
9. Enums n√£o utilizados

---

## ‚ö° **COMANDOS DE VERIFICA√á√ÉO R√ÅPIDA**

```bash
# Verificar apenas arquivos modificados:
npx eslint $(git diff --name-only --cached | grep -E '\.(ts|tsx)$')

# Buscar por 'any' em arquivos TypeScript:
grep -r ": any\|any\[\]\|as any" src/ --include="*.ts" --include="*.tsx"

# Buscar imports n√£o utilizados:
npx eslint src/ --rule="@typescript-eslint/no-unused-vars: error"

# Verificar fun√ß√µes sem tipo de retorno:
grep -r "function\|=>\|async" src/ --include="*.ts" | grep -v ": \|=>"

# An√°lise completa de um arquivo espec√≠fico:
npx eslint path/to/file.ts --max-warnings 0
```

---

## üéØ **LI√á√ÉO APRENDIDA - REFLEX√ÉO OBRIGAT√ìRIA**

### **DADOS HIST√ìRICOS:**

- **334 warnings eliminados** em 3 dias de retrabalho
- **Tempo desperdi√ßado:** 24 horas de desenvolvimento
- **Causa raiz:** Falta de disciplina no processo de codifica√ß√£o
- **Impacto:** Atraso na entrega e frustra√ß√£o da equipe

### **MANTRA DE DESENVOLVIMENTO:**

> "Cada linha de c√≥digo escrita sem tipo espec√≠fico √© uma d√≠vida t√©cnica que cobrarei de mim mesmo no futuro."

### **COMPROMISSO:**

> "Eu me comprometo a seguir o processo mental estruturado, verificar incrementalmente e nunca entregar c√≥digo com warnings."

---

## üö® **RESPONSABILIDADE DA IA DE DESENVOLVIMENTO**

### **PROTOCOLO MENTAL ANTES DE CODIFICAR:**

### **GATE ZERO - VERIFICA√á√ÉO DE ESTADO INICIAL**

    <pre_modification_check>
    ANTES de tocar em QUALQUER arquivo:
    **DOCUMENTAR ESTADO:**

    ** * Warnings atuais:** _____
    ** * Errors atuais:** _____
    Se ZERO ‚Üí COMPROMISSO: Manter ZERO


    REGRA INVIOL√ÅVEL:

    Estado inicial: 0 warnings ‚Üí Estado final: 0 warnings
    Estado inicial: 3 warnings ‚Üí Estado final: ‚â§3 warnings
    NUNCA PIORAR O C√ìDIGO
    </pre_modification_check>




1. **EXECUTAR VERIFICA√á√ÉO INICIAL:**
   ```bash
   npm run lint > lint_before.txt

1. **"Vou usar algum 'any' neste c√≥digo?"**
   - SE SIM ‚Üí PARAR e repensar a solu√ß√£o
   - SE N√ÉO ‚Üí Prosseguir para pr√≥xima pergunta

2. **"Todos os imports ser√£o utilizados?"**
   - SE N√ÉO ‚Üí N√ÉO importar
   - SE SIM ‚Üí Documentar onde cada um ser√° usado

3. **"Todos os par√¢metros s√£o necess√°rios?"**
   - SE N√ÉO ‚Üí Remover antes de escrever
   - SE SIM ‚Üí Prosseguir

4. **"Tenho tipos espec√≠ficos para tudo?"**
   - SE N√ÉO ‚Üí Criar interfaces/types ANTES de codificar
   - SE SIM ‚Üí Iniciar codifica√ß√£o

### **PROTOCOLO DE REVIS√ÉO CONT√çNUA:**

**A CADA 10 LINHAS:**
1. PAUSAR codifica√ß√£o
2. Buscar 'any' nas √∫ltimas 10 linhas
3. Checar imports ainda n√£o utilizados
4. Confirmar tipos espec√≠ficos
5. SE encontrar problemas ‚Üí Corrigir IMEDIATAMENTE
6. SE tudo limpo ‚Üí Continuar codifica√ß√£o

### **PROTOCOLO FINAL:**

1. Revisar linha por linha procurando 'any'
2. Verificar CADA import
3. Verificar CADA par√¢metro de fun√ß√£o
4. Confirmar TODOS os tipos de retorno
5. Executar verifica√ß√£o mental do template
6. SE algum item falhou ‚Üí RETRABALHAR at√© aprova√ß√£o
7. SE todos passaram ‚Üí C√≥digo aprovado para entrega

---

## üíÄ **CONSEQU√äNCIAS DO N√ÉO CUMPRIMENTO**

### **IMPACTOS DIRETOS:**

1. **Retrabalho Extensivo**: 3+ dias para limpar warnings
2. **Perda de Produtividade**: 24+ horas desperdi√ßadas
3. **Degrada√ß√£o da Base de C√≥digo**: D√≠vida t√©cnica acumulada
4. **Frustra√ß√£o da Equipe**: Moral reduzida

### **IMPACTOS INDIRETOS:**

- Bugs em produ√ß√£o por tipos inadequados
- Dificuldade de manuten√ß√£o futura
- Onboarding mais dif√≠cil para novos devs
- Perda de confian√ßa na qualidade do c√≥digo

### **CUSTO REAL:**

> Um 'any' economiza 30 segundos agora, mas custa 30 minutos depois.

### **üî¥ FALHAS GRAV√çSSIMAS - DEMISS√ÉO IMEDIATA**

1. **DEGRADAR C√ìDIGO LIMPO:**
   - Pegar c√≥digo com 0 warnings ‚Üí entregar com warnings
   - Puni√ß√£o: REFAZER TODO O TRABALHO

2. **C√ìDIGO ESPECULATIVO:**
   - Adicionar c√≥digo "para usar depois"
   - Puni√ß√£o: DELETAR TODO C√ìDIGO N√ÉO USADO

**LEMBRE-SE:** 
> "C√≥digo que estava limpo e ficou sujo = INCOMPET√äNCIA M√ÅXIMA"
> "C√≥digo para o futuro = DESPERD√çCIO no presente"

---

## ‚úÖ **RESUMO EXECUTIVO**

### **REGRA DE OURO**
> "Se voc√™ n√£o faria isso em c√≥digo de produ√ß√£o enterprise, n√£o fa√ßa aqui."

### **MANTRA DO DESENVOLVEDOR**
> "C√≥digo limpo desde a primeira linha, tipos espec√≠ficos sempre, imports apenas necess√°rios."

### **PROCESSO EM 3 PASSOS**
1. **PENSAR** antes de codificar (documentar tipos necess√°rios)
2. **VERIFICAR** a cada 10 linhas (pausa e revis√£o)
3. **VALIDAR** antes de entregar (checklist completo)

### **RESULTADO ESPERADO**
> "0 warnings √© o √∫nico resultado aceit√°vel."

### **COMPROMISSO FINAL**
> "Cada arquivo entregue passou por todos os gates e verifica√ß√µes. Sem exce√ß√µes."

---

## üèÅ **DECLARA√á√ÉO FINAL**

**Esta regra foi criada com base em:**
- 3 dias de retrabalho desnecess√°rio
- 334 warnings eliminados
- Li√ß√µes aprendidas dolorosamente

**LEMBRE-SE:**
> O tempo que voc√™ "economiza" pulando estas verifica√ß√µes ser√° cobrado em dobro no futuro.

**SIGA O PROCESSO:**
> Pensar ‚Üí Codificar ‚Üí Verificar ‚Üí Validar ‚Üí Entregar

**NUNCA PULE ETAPAS.**

---

### **Metadados**

- **Vers√£o:** 2.0
- **Data:** 2025
- **Baseado em:** Experi√™ncia real de retrabalho
- **Warnings eliminados:** 334
- **Tempo desperdi√ßado:** 72 horas
