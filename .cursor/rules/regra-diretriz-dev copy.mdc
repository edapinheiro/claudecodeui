---
description: 
globs: 
alwaysApply: false
---
# üö® DIRETRIZES CR√çTICAS DE DESENVOLVIMENTO - PREVEN√á√ÉO DE RETRABALHO

## ‚ö†Ô∏è ESTA REGRA √â OBRIGAT√ìRIA ANTES DE QUALQUER DESENVOLVIMENTO

---

## üõë **JAMAIS FA√áA - LISTA DE PROIBI√á√ïES ABSOLUTAS**

### üö´ **1. USO DE `any` - TERMINANTEMENTE PROIBIDO**
```typescript
// ‚ùå NUNCA FA√áA ISSO:
function processData(data: any): any {
    return data.something;
}

const result: any = someFunction();
catch (error: any) { }

// ‚úÖ SEMPRE FA√áA ASSIM:
function processData(data: ProcessedData): ProcessedData {
    return data.something;
}

const result: SpecificType = someFunction();
catch (error) { } // ou catch (error: Error)
```

### üö´ **2. IMPORTS N√ÉO UTILIZADOS - REMO√á√ÉO OBRIGAT√ìRIA**
```typescript
// ‚ùå NUNCA DEIXE IMPORTS √ìRF√ÉOS:
import { UnusedType, AnotherUnused } from './types';
import { SomeFunction } from './utils'; // se n√£o usar, REMOVA

// ‚úÖ APENAS IMPORTS EFETIVAMENTE UTILIZADOS:
import { UsedType } from './types';
```

### üö´ **3. VARI√ÅVEIS E PAR√ÇMETROS N√ÉO UTILIZADOS**
```typescript
// ‚ùå NUNCA DEIXE PAR√ÇMETROS SEM USO:
function process(data: Data, unusedParam: string) {
    return data.value;
}

// ‚úÖ USE UNDERSCORE OU REMOVA:
function process(data: Data, _unusedParam: string) {
    return data.value;
}
// OU MELHOR AINDA:
function process(data: Data) {
    return data.value;
}
```

### üö´ **4. FUN√á√ïES SEM TIPAGEM ADEQUADA**
```typescript
// ‚ùå JAMAIS FA√áA RETORNOS SEM TIPO:
function calculate() { // Tipo de retorno indefinido
    return someComplexCalculation();
}

// ‚úÖ SEMPRE DEFINA TIPOS DE RETORNO:
function calculate(): CalculationResult {
    return someComplexCalculation();
}
```

---

## ‚úÖ **OBRIGA√á√ïES DURANTE O DESENVOLVIMENTO**

### üìã **1. CHECKLIST PR√â-COMMIT OBRIGAT√ìRIO**
Antes de finalizar QUALQUER arquivo, execute:

```bash
# 1. VERIFICA√á√ÉO OBRIGAT√ìRIA DE ESLINT:
npm run lint

# 2. SE HOUVER WARNINGS/ERRORS, CORRIJA IMEDIATAMENTE
# 3. N√ÉO PROSSIGA SEM 0 WARNINGS
```

### üìã **2. TIPAGEM DEFENSIVA OBRIGAT√ìRIA**
```typescript
// ‚úÖ SEMPRE crie interfaces/types espec√≠ficos:
interface ProcessingConfig {
    timeout: number;
    retries: number;
    batchSize: number;
}

interface ProcessingResult {
    success: boolean;
    data: ProcessedData[];
    errors: ProcessingError[];
}

// ‚úÖ SEMPRE tipifique catch blocks adequadamente:
try {
    // opera√ß√£o
} catch (error) { // SEM any!
    if (error instanceof Error) {
        logger.error('Processing failed:', error.message);
    }
}
```

### üìã **3. LIMPEZA CONT√çNUA OBRIGAT√ìRIA**
- **A cada fun√ß√£o criada**: Verificar se todos os imports s√£o necess√°rios
- **A cada interface/type**: Verificar se est√° sendo utilizada
- **A cada par√¢metro**: Verificar se est√° sendo usado ou marcar com `_`

---

## üéØ **PADR√ïES OBRIGAT√ìRIOS POR CATEGORIA**

### **APIs/Routes**
```typescript
// ‚úÖ SEMPRE:
interface RequestBody {
    // tipos espec√≠ficos
}

interface ResponseData {
    // tipos espec√≠ficos  
}

export async function POST(request: NextRequest): Promise<NextResponse<ResponseData>> {
    try {
        // implementa√ß√£o
    } catch (error) { // SEM any
        return NextResponse.json({ error: 'Processing failed' }, { status: 500 });
    }
}
```

### **Services/Utilities**
```typescript
// ‚úÖ SEMPRE:
class ServiceClass {
    private readonly config: ServiceConfig; // tipo espec√≠fico
    
    public async processData(input: InputType): Promise<OutputType> {
        // implementa√ß√£o com tipos espec√≠ficos
    }
    
    private handleError(error: unknown): ServiceError {
        // tratamento tipado de erro
    }
}
```

### **React Components**
```typescript
// ‚úÖ SEMPRE:
interface ComponentProps {
    // props tipificadas
}

export function Component({ prop1, prop2 }: ComponentProps): JSX.Element {
    // implementa√ß√£o
}
```

---

## üîç **VERIFICA√á√ïES AUTOM√ÅTICAS OBRIGAT√ìRIAS**

### **Antes de cada commit:**
1. `npm run lint` deve retornar **0 warnings, 0 errors**
2. `npm run type-check` deve passar sem erros
3. Revis√£o manual para `any` em arquivos modificados

### **Durante desenvolvimento:**
```bash
# Configure seu editor para mostrar eslint em tempo real
# VSCode: ESLint extension
# Cursor: ESLint integration ativado
```

---

## ‚ö° **COMANDOS DE VERIFICA√á√ÉO R√ÅPIDA**

```bash
# Verificar apenas arquivos modificados:
npx eslint $(git diff --name-only --cached | grep -E '\.(ts|tsx)$')

# Buscar por 'any' em arquivos TypeScript:
grep -r ": any\|any\[\]\|as any" src/ --include="*.ts" --include="*.tsx"

# Buscar imports n√£o utilizados:
npx eslint src/ --rule="@typescript-eslint/no-unused-vars: error"
```

---

## üéØ **LI√á√ÉO APRENDIDA - REFLEX√ÉO OBRIGAT√ìRIA**

**LEMBRE-SE SEMPRE:**
- **334 warnings eliminados em 3 dias de retrabalho**
- **Tempo perdido que poderia ter sido prevenido**
- **Cada `any` usado = d√©bito t√©cnico futuro**
- **Cada import n√£o utilizado = polui√ß√£o de c√≥digo**

---
**Pense passo a passo**

## üö® **RESPONSABILIDADE DA IA DE DESENVOLVIMENTO**

### **PRIMEIRO ANTES de escrever qualquer c√≥digo:**
1. "Vou usar algum `any` neste c√≥digo?" ‚Üí **SE SIM, REPENSAR**
2. "Todos os imports ser√£o utilizados?" ‚Üí **SE N√ÉO, N√ÉO IMPORTAR**
3. "Todos os par√¢metros s√£o necess√°rios?" ‚Üí **SE N√ÉO, REMOVER**
4. "Tenho tipos espec√≠ficos para tudo?" ‚Üí **SE N√ÉO, CRIAR**

### **AP√ìS escrever c√≥digo:**
1. Revisar linha por linha procurando por `any`
2. Verificar cada import
3. Verificar cada par√¢metro de fun√ß√£o
4. Executar lint mentalmente

---

## üíÄ **PENALIDADES POR DESCUMPRIMENTO**

**Se esta regra for ignorada e c√≥digos com warnings forem entregues:**
- **Retrabalho extensivo necess√°rio**
- **Perda de tempo em limpeza posterior**  
- **Deteriora√ß√£o da qualidade do c√≥digo**
- **Frustra√ß√£o da equipe de desenvolvimento**

---

## ‚úÖ **RESUMO EXECUTIVO**

**REGRA DE OURO**: *"Se voc√™ n√£o faria isso em c√≥digo de produ√ß√£o enterprise, n√£o fa√ßa aqui."*

**MANTRA**: *"C√≥digo limpo desde a primeira linha, tipos espec√≠ficos sempre, imports apenas necess√°rios."*

**VERIFICA√á√ÉO FINAL**: *"0 warnings √© o √∫nico resultado aceit√°vel."*

---

**Esta regra foi criada com base em 3 dias de retrabalho e 334 warnings eliminados. N√£o repita os erros do passado.**